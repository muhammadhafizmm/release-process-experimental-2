#!/usr/bin/env bash
set -e

VERSION_TYPE=$1

# === Validate input ===
if [ -z "$VERSION_TYPE" ]; then
  echo "❌  Missing version type argument."
  echo "ℹ️   Usage: $0 <VERSION_TYPE>"
  echo "     Example: $0 major | patch"
  exit 1
fi

# === Ensure working directory is clean ===
if [[ -n "$(git status --porcelain)" ]]; then
  echo "❌  Your working directory is not clean."
  echo "💡  Please commit or stash your changes before running this script."
  exit 1
fi

# === Ensure Git user config is set ===
GIT_NAME=$(git config user.name || true)
GIT_EMAIL=$(git config user.email || true)

if [[ -z "$GIT_NAME" || -z "$GIT_EMAIL" ]]; then
  echo "❌  Git user.name or user.email is not configured."
  echo "💡  Configure it with:"
  echo "     git config --global user.name \"Your Name\""
  echo "     git config --global user.email \"you@example.com\""
  exit 1
fi

# === Ensure GitHub CLI (gh) is installed ===
if ! command -v gh &>/dev/null; then
  echo "❌  GitHub CLI (gh) is not installed."
  echo "💡  Install it using one of the following:"
  echo "     macOS:   brew install gh"
  echo "     Ubuntu:  sudo apt install gh"
  echo "     Windows: winget install --id GitHub.cli"
  echo ""
  echo "     Then authenticate with: gh auth login"
  exit 1
fi

# === Sync branches if sync.sh exists ===
if [ -f ./scripts/helper/sync.sh ]; then
  echo "🔄  Syncing branches: release, rc, main..."
  ./scripts/helper/sync.sh > /dev/null 2>&1
fi

# === Prepare main branch ===
echo "📥  Checking out latest main branch..."
git checkout main > /dev/null 2>&1

# === Generate next beta version ===
echo "🔢  Generating next beta version from '$VERSION_TYPE'..."
VERSION=$(node ./scripts/versioning/generate-version.js "$VERSION_TYPE" rc 2>/dev/null | grep VERSION | cut -d'=' -f2)

if [[ -z "$VERSION" ]]; then
  echo "❌  Failed to retrieve version from Node script."
  exit 1
fi

echo "✅  Next version: $VERSION"

# === Create & push new branch (replace if exists) ===
BRANCH_NAME="cut-off/${VERSION}"
echo "🌿 Creating branch: $BRANCH_NAME"

# Check if local branch exists and delete it
if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
  echo "🧹 Deleting existing local branch $BRANCH_NAME..."
  git branch -D "$BRANCH_NAME"
fi

# Check if remote branch exists and delete it
if git ls-remote --exit-code --heads origin "$BRANCH_NAME" > /dev/null 2>&1; then
  echo "🧹 Deleting existing remote branch $BRANCH_NAME..."
  git push origin --delete "$BRANCH_NAME" > /dev/null 2>&1
fi

# Create new branch and push
git checkout -b "$BRANCH_NAME" > /dev/null 2>&1
git push -u origin "$BRANCH_NAME" > /dev/null 2>&1
echo "✅ Branch $BRANCH_NAME created and pushed."

# === Create pull request to RC ===
echo "🚀  Creating pull request to 'rc' branch..."
gh pr create \
  --base rc \
  --head "$BRANCH_NAME" \
  --title "[RELEASE][STAGING] ${VERSION}" \
  --body "This pull request is automatically generated by \`./cut-off.sh\` script by @${GIT_NAME}." \
  > /dev/null 2>&1

# === Restore local state ===
git checkout main > /dev/null 2>&1

echo "🎉  Pull request created successfully!"
