#!/usr/bin/env bash
set -e

VERSION_TYPE=$1

# === Validate input ===
if [ -z "$VERSION_TYPE" ]; then
  echo "‚ùå  Missing version type argument."
  echo "‚ÑπÔ∏è   Usage: $0 <VERSION_TYPE>"
  echo "     Example: $0 major | patch"
  exit 1
fi

# === Ensure working directory is clean ===
if [[ -n "$(git status --porcelain)" ]]; then
  echo "‚ùå  Your working directory is not clean."
  echo "üí°  Please commit or stash your changes before running this script."
  exit 1
fi

# === Ensure Git user config is set ===
GIT_NAME=$(git config user.name || true)
GIT_EMAIL=$(git config user.email || true)

if [[ -z "$GIT_NAME" || -z "$GIT_EMAIL" ]]; then
  echo "‚ùå  Git user.name or user.email is not configured."
  echo "üí°  Configure it with:"
  echo "     git config --global user.name \"Your Name\""
  echo "     git config --global user.email \"you@example.com\""
  exit 1
fi

# === Ensure GitHub CLI (gh) is installed ===
if ! command -v gh &>/dev/null; then
  echo "‚ùå  GitHub CLI (gh) is not installed."
  echo "üí°  Install it using one of the following:"
  echo "     macOS:   brew install gh"
  echo "     Ubuntu:  sudo apt install gh"
  echo "     Windows: winget install --id GitHub.cli"
  echo ""
  echo "     Then authenticate with: gh auth login"
  exit 1
fi

# === Prepare main branch ===
echo "üì•  Checking out latest main branch..."
git fetch origin main
git checkout main
git pull origin main

# === Generate next beta version ===
echo "üî¢  Generating next beta version from '$VERSION_TYPE'..."
VERSION=$(node ./scripts/versioning/generate-version.js "$VERSION_TYPE" rc | grep VERSION | cut -d'=' -f2)

if [[ -z "$VERSION" ]]; then
  echo "‚ùå  Failed to retrieve version from Node script."
  exit 1
fi

echo "‚úÖ  Next version: $VERSION"

# === Create & push new branch ===
BRANCH_NAME="cut-off/${VERSION}"
echo "üåø  Creating branch: $BRANCH_NAME"
git checkout -b "$BRANCH_NAME"
git push -u origin "$BRANCH_NAME"

# === Create pull request to RC ===
echo "üöÄ  Creating pull request to 'rc' branch..."
gh pr create \
  --base rc \
  --head "$BRANCH_NAME" \
  --title "[RELEASE][STAGING] ${VERSION}" \
  --body "This pull request is automatically generated by \`./cut-off.sh\` script by @${GIT_NAME}."

# === Restore local state ===
git checkout main

echo "üéâ  Pull request created successfully!"
