#!/usr/bin/env bash
set -e

MODE=$1

# === Parse hotfix mode with required target branch ===
if [[ "$MODE" == --hotfix=* ]]; then
  HOTFIX_MODE=true
  TARGET_BRANCH="${MODE#--hotfix=}"

  if [[ -z "$TARGET_BRANCH" ]]; then
    echo "‚ùå  Missing target branch for hotfix."
    echo "‚ÑπÔ∏è   Usage: $0 --hotfix=<TARGET_BRANCH>"
    exit 1
  fi
elif [[ "$MODE" == "--hotfix" ]]; then
  echo "‚ùå  Invalid hotfix usage: missing target branch."
  echo "‚ÑπÔ∏è   Usage: $0 --hotfix=<TARGET_BRANCH>"
  exit 1
else
  HOTFIX_MODE=false
  VERSION_TYPE=$MODE
  if [[ "$VERSION_TYPE" != "major" && "$VERSION_TYPE" != "patch" ]]; then
    echo "‚ùå  Invalid version type: '$VERSION_TYPE'"
    echo "‚ÑπÔ∏è   Accepted values: major | patch"
    exit 1
  fi
fi


# === Ensure working directory is clean ===
if [[ -n "$(git status --porcelain)" ]]; then
  echo "‚ùå  Your working directory is not clean."
  echo "üí°  Please commit or stash your changes before running this script."
  exit 1
fi

# === Ensure Git user config is set ===
GIT_NAME=$(git config user.name || true)
GIT_EMAIL=$(git config user.email || true)

if [[ -z "$GIT_NAME" || -z "$GIT_EMAIL" ]]; then
  echo "‚ùå  Git user.name or user.email is not configured."
  echo "üí°  Configure it with:"
  echo "     git config --global user.name \"Your Name\""
  echo "     git config --global user.email \"you@example.com\""
  exit 1
fi

# === Ensure GitHub CLI (gh) is installed ===
if ! command -v gh &>/dev/null; then
  echo "‚ùå  GitHub CLI (gh) is not installed."
  echo "üí°  Install it using one of the following:"
  echo "     macOS:   brew install gh"
  echo "     Ubuntu:  sudo apt install gh"
  echo "     Windows: winget install --id GitHub.cli"
  echo ""
  echo "     Then authenticate with: gh auth login"
  exit 1
fi

# === Run sync if available ===
if [ -f ./scripts/helper/sync.sh ]; then
  echo "üîÑ  Syncing branches: release, rc, main..."
  ./scripts/helper/sync.sh > /dev/null 2>&1
fi


# === Hotfix Flow ===
if [[ "$HOTFIX_MODE" == true ]]; then
  if [[ -n "$TARGET_BRANCH" ]]; then
    echo "üì•  Checking out latest '$TARGET_BRANCH' branch..."
    git fetch origin "$TARGET_BRANCH" > /dev/null 2>&1
    git checkout "$TARGET_BRANCH" > /dev/null 2>&1
    git pull origin "$TARGET_BRANCH" > /dev/null 2>&1
  fi

  CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
  echo "üî¢  Generating hotfix version from current branch '$CURRENT_BRANCH'..."
  VERSION=$(node ./scripts/versioning/generate-version.js --hotfix 2>/dev/null | grep VERSION | cut -d'=' -f2)

  if [[ -z "$VERSION" ]]; then
    echo "‚ùå  Failed to generate hotfix version."
    exit 1
  fi

  echo "üöë  Creating hotfix pull request from '$CURRENT_BRANCH' to 'release'..."
  gh pr create \
    --base release \
    --head "$CURRENT_BRANCH" \
    --title "[HOTFIX][PRODUCTION] ${VERSION}" \
    --body "This hotfix PR is automatically generated by \`./release.sh $MODE\` by @$GIT_NAME." \
    > /dev/null 2>&1

  git checkout main > /dev/null 2>&1
  echo "üéâ  Hotfix PR created successfully!"
  exit 0
fi

# === Normal release flow ===
echo "üì•  Checking out latest 'rc' branch..."
git fetch origin > /dev/null 2>&1
git checkout rc > /dev/null 2>&1
git pull origin rc > /dev/null 2>&1

echo "üî¢  Generating next release version from '$VERSION_TYPE'..."
VERSION=$(node ./scripts/versioning/generate-version.js "$VERSION_TYPE" release 2>/dev/null | grep VERSION | cut -d'=' -f2)

if [[ -z "$VERSION" ]]; then
  echo "‚ùå  Failed to retrieve version from Node script."
  exit 1
fi

echo "‚úÖ  Next version: $VERSION"

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

echo "üöÄ  Creating pull request to 'release' branch..."
gh pr create \
  --base release \
  --head "$CURRENT_BRANCH" \
  --title "[RELEASE][PRODUCTION] ${VERSION}" \
  --body "This pull request is automatically generated by \`./release.sh $VERSION_TYPE\` by @$GIT_NAME." \
  > /dev/null 2>&1

git checkout main > /dev/null 2>&1
echo "üéâ  Pull request created successfully!"
