name: Push Release Tag Staging & Production

on:
  pull_request:
    branches:
      - rc
      - release
    types: [closed]

concurrency:
  group: staging-build
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      version: ${{ steps.release_version.outputs.version }}
    steps:
      - name: Extract Version from PR title
        id: release_version
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          VERSION=$(echo "$TITLE" | grep -oE 'v[0-9]+\.[0-9]+(-beta\.[0-9]+|-hotfix\.[0-9]+)?' || true)
          echo "version=$VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  push-release:
    needs: setup
    runs-on: ubuntu-latest
    if: needs.setup.outputs.version != ''
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Set base and head commit SHA
        id: branch_info
        run: |
          echo "base=${{ github.event.pull_request.base.sha }}" >> "$GITHUB_OUTPUT"
          echo "head=${{ github.event.pull_request.head.sha }}" >> "$GITHUB_OUTPUT"

      - name: Generate changelog (Node.js)
        run: |
          node ./scripts/versioning/generate-changelog.js \
            ${{ steps.branch_info.outputs.base }} \
            ${{ steps.branch_info.outputs.head }} \
            CHANGELOG.md \
            ${{ needs.setup.outputs.version }}

      - name: Create and Push Git Tag
        run: |
          VERSION="${{ needs.setup.outputs.version }}"
          git tag "$VERSION"
          git push origin "$VERSION"

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.setup.outputs.version }}"
          IS_PRODUCTION="${{ github.event.pull_request.base.ref == 'release' }}"

          gh release create "$VERSION" \
            --title "$VERSION" \
            --notes-file CHANGELOG_temp.md \
            --target "$VERSION" \
            $([ "$IS_PRODUCTION" = "true" ] || echo "--prerelease")

          rm -f CHANGELOG.md CHANGELOG_temp.md

      - name: Trigger Build and Deploy Staging Workflow (if pushed in GHA)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${{ needs.setup.outputs.version }}"
          echo "üöÄ Triggering Build and Deploy Staging workflow for tag: $TAG_NAME"

          # NOTE: This assumes the workflow file name is `build-deploy-staging.yml`
          gh workflow run "Build and Deploy Staging" --ref "$TAG_NAME"

      - name: Conditionally Cherry-pick to Main and Tag RC
        if: startsWith(github.event.pull_request.head.ref, 'hotfix/') && github.event.pull_request.base.ref == 'release'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üî• Hotfix detected: cherry-pick to main and propagate to rc..."

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          COMMIT_SHA="${{ steps.branch_info.outputs.head }}"
          FAILED=""
          MERGE_RC_SUCCESS=true

          # === Cherry-pick to main ===
          git fetch origin main
          git checkout main

          echo "üçí Attempting cherry-pick $COMMIT_SHA..."
          if git cherry-pick "$COMMIT_SHA" --no-commit > /dev/null 2>&1; then
            if [[ -n "$(git status --porcelain)" ]]; then
              echo "‚úÖ Cherry-pick successful. Committing and pushing..."
              git commit -m "chore: cherry-pick hotfix from $COMMIT_SHA into main"
              git push origin HEAD:main
            else
              echo "‚ö†Ô∏è  No changes. Skipping commit."
              git cherry-pick --abort || true
            fi
          else
            echo "‚ùå Cherry-pick failed. Conflict or duplicate."
            git cherry-pick --abort || true
            FAILED="${FAILED}\n‚ùå Cherry-pick to 'main' failed ‚Äî please resolve manually."
          fi

          # === Ensure working tree is clean before merge to rc ===
          echo "üßπ Cleaning up working directory before switching to rc..."
          git reset --hard HEAD
          git clean -fd

          # === Merge release into rc ===
          git fetch origin rc
          git checkout rc

          echo "üîÄ Merging origin/release into rc..."
          if git merge origin/release -m "chore: merge hotfix into rc" > /dev/null 2>&1; then
            git push origin HEAD:rc
            echo "‚úÖ Merged release into rc."
          else
            echo "‚ùå Merge conflict in rc."
            git merge --abort || true
            MERGE_RC_SUCCESS=false
            FAILED="${FAILED}\n‚ùå Merge to 'rc' failed ‚Äî please resolve manually."
          fi

          # === Tag & Create RC Pre-release ===
          if [ "$MERGE_RC_SUCCESS" = true ]; then
            BETA_VERSION=$(node ./scripts/versioning/generate-version.js patch rc | grep VERSION | cut -d'=' -f2)

            if [[ -z "$BETA_VERSION" ]]; then
              FAILED="${FAILED}\n‚ùå Failed to generate version tag."
            else
              echo "üè∑Ô∏è  Tagging rc with $BETA_VERSION..."
              git tag "$BETA_VERSION"
              git push origin "$BETA_VERSION"

              node ./scripts/versioning/generate-changelog.js \
                ${{ steps.branch_info.outputs.base }} \
                ${{ steps.branch_info.outputs.head }} \
                CHANGELOG.md \
                "$BETA_VERSION"

              echo "üì¶ Creating GitHub prerelease..."
              gh release create "$BETA_VERSION" \
                --title "$BETA_VERSION" \
                --notes-file CHANGELOG_temp.md \
                --prerelease
            fi
          else
            echo "‚ö†Ô∏è  Skipping tag & release due to merge failure."
          fi

          # === Final Error Report ===
          if [ -n "$FAILED" ]; then
            echo -e "\nüö® ERRORS DETECTED DURING HOTFIX PROCESS:"
            echo -e "$FAILED"
            exit 1
          fi

          echo "‚úÖ Hotfix flow completed successfully."
