name: Push Release Tag Staging & Production

on:
  pull_request:
    branches:
      - rc
      - release
    types: [closed]

jobs:
  setup:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      version: ${{ steps.release_version.outputs.version }}
    steps:
      - name: Extract Version from PR title
        id: release_version
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          VERSION=$(echo "$TITLE" | grep -oE 'v[0-9]+\.[0-9]+(-beta\.[0-9]+|-hotfix\.[0-9]+)?' || true)
          echo "version=$VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  push-release:
    needs: setup
    runs-on: ubuntu-latest
    if: needs.setup.outputs.version != ''
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Set base and head commit SHA
        id: branch_info
        run: |
          echo "base=${{ github.event.pull_request.base.sha }}" >> "$GITHUB_OUTPUT"
          echo "head=${{ github.event.pull_request.head.sha }}" >> "$GITHUB_OUTPUT"

      - name: Generate changelog (Node.js)
        run: |
          node ./scripts/versioning/generate-changelog.js \
            ${{ steps.branch_info.outputs.base }} \
            ${{ steps.branch_info.outputs.head }} \
            CHANGELOG.md \
            ${{ needs.setup.outputs.version }}

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          VERSION="${{ needs.setup.outputs.version }}"
          IS_PRODUCTION="${{ github.event.pull_request.base.ref == 'release' }}"

          gh release create "$VERSION" \
            --title "$VERSION" \
            --notes-file CHANGELOG_temp.md \
            $([ "$IS_PRODUCTION" = "true" ] || echo "--prerelease")

          rm -f CHANGELOG.md CHANGELOG_temp.md
        
  hotfix-cherry-pick-main:
    needs: [ setup, push-release ]
    if: startsWith(github.event.pull_request.head.ref, 'hotfix/') && github.event.pull_request.base.ref == 'release'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cherry-pick to Main
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          COMMIT_SHA="${{ github.event.pull_request.head.sha }}"

          echo "🔧 Configure Git"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git

          echo "🍒 Cherry-picking $COMMIT_SHA to main..."
          git fetch origin main
          git checkout main

          if git cherry-pick "$COMMIT_SHA" --no-commit > /dev/null 2>&1; then
            if [[ -n "$(git status --porcelain)" ]]; then
              git commit -m "chore: cherry-pick hotfix from $COMMIT_SHA into main"
              git push origin HEAD:main
              echo "✅ Cherry-pick successful."
            else
              echo "⚠️ No changes to commit. Skipping."
              git cherry-pick --abort || true
            fi
          else
            echo "❌ Cherry-pick to main failed. Aborting..."
            git cherry-pick --abort || true
            echo "::error::Cherry-pick to 'main' failed — please resolve manually."
            exit 1
          fi

  hotfix-merge-rc-and-tag:
    needs: [ setup, push-release ]
    if: startsWith(github.event.pull_request.head.ref, 'hotfix/') && github.event.pull_request.base.ref == 'release'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Merge Release into RC
        run: |
          echo "🔀 Merging origin/release into rc..."
          git fetch origin rc
          git checkout rc

          if git merge origin/release -m "chore: merge hotfix into rc" > /dev/null 2>&1; then
            git push origin HEAD:rc
            echo "✅ Merged successfully."
          else
            git merge --abort || true
            echo "::error::Merge to 'rc' failed — please resolve manually."
            exit 1
          fi

      - name: Create RC Prerelease Tag
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          BETA_VERSION=$(node ./scripts/versioning/generate-version.js patch rc | grep VERSION | cut -d'=' -f2)

          if [[ -z "$BETA_VERSION" ]]; then
            echo "::error::Failed to generate version tag."
            exit 1
          fi

          node ./scripts/versioning/generate-changelog.js \
            ${{ github.event.pull_request.base.sha }} \
            ${{ github.event.pull_request.head.sha }} \
            CHANGELOG.md \
            "$BETA_VERSION"

          echo "📦 Creating GitHub prerelease $BETA_VERSION..."
          gh release create "$BETA_VERSION" \
            --title "$BETA_VERSION" \
            --notes-file CHANGELOG_temp.md \
            --prerelease
        
